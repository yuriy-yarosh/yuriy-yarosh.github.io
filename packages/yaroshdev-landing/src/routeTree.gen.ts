/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './Layout'
import { Route as PagesLegalImport } from './Pages/Legal'
import { Route as PagesContactsImport } from './Pages/Contacts'
import { Route as PagesHomeImport } from './Pages/Home'

// Create/Update Routes

const PagesLegalRoute = PagesLegalImport.update({
  id: '/legal',
  path: '/legal',
  getParentRoute: () => rootRoute,
} as any)

const PagesContactsRoute = PagesContactsImport.update({
  id: '/contacts',
  path: '/contacts',
  getParentRoute: () => rootRoute,
} as any)

const PagesHomeRoute = PagesHomeImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PagesHomeImport
      parentRoute: typeof rootRoute
    }
    '/contacts': {
      id: '/contacts'
      path: '/contacts'
      fullPath: '/contacts'
      preLoaderRoute: typeof PagesContactsImport
      parentRoute: typeof rootRoute
    }
    '/legal': {
      id: '/legal'
      path: '/legal'
      fullPath: '/legal'
      preLoaderRoute: typeof PagesLegalImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof PagesHomeRoute
  '/contacts': typeof PagesContactsRoute
  '/legal': typeof PagesLegalRoute
}

export interface FileRoutesByTo {
  '/': typeof PagesHomeRoute
  '/contacts': typeof PagesContactsRoute
  '/legal': typeof PagesLegalRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof PagesHomeRoute
  '/contacts': typeof PagesContactsRoute
  '/legal': typeof PagesLegalRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/contacts' | '/legal'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/contacts' | '/legal'
  id: '__root__' | '/' | '/contacts' | '/legal'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  PagesHomeRoute: typeof PagesHomeRoute
  PagesContactsRoute: typeof PagesContactsRoute
  PagesLegalRoute: typeof PagesLegalRoute
}

const rootRouteChildren: RootRouteChildren = {
  PagesHomeRoute: PagesHomeRoute,
  PagesContactsRoute: PagesContactsRoute,
  PagesLegalRoute: PagesLegalRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "Layout.tsx",
      "children": [
        "/",
        "/contacts",
        "/legal"
      ]
    },
    "/": {
      "filePath": "Pages/Home.tsx"
    },
    "/contacts": {
      "filePath": "Pages/Contacts.tsx"
    },
    "/legal": {
      "filePath": "Pages/Legal.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
